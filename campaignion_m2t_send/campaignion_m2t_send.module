<?php

/**
 * @file
 * Hook and callback implementations for this module.
 */

use Drupal\campaignion_email_to_target\Channel\EmailNoSend;
use Drupal\campaignion_m2t_send\SendMessagesCron;
use Drupal\little_helpers\Services\Container;
use Drupal\little_helpers\Webform\Submission;

/**
 * Implements hook_little_helpers_services().
 */
function campaignion_m2t_send_little_helpers_services() {
  $info['campaignion_m2t_send.SendMessagesCron'] = [
    'class' => SendMessagesCron::class,
    'arguments' => [
      '!campaignion_m2t_send_enabled_nodes',
      '!campaignion_m2t_send_cron_time_limit',
    ],
  ];
  return $info;
}

/**
 * Implements hook_cronapi().
 */
function campaignion_m2t_send_cronapi($op, $job = NULL) {
  $items['campaignion_m2t_send'] = [
    'description' => 'Send M2T messages of selected nodes',
    'rule' => '*+@ 8-23 * * *',
    'weight' => 100,
    'callback' => '_campaignion_m2t_send_run',
    'arguments' => ['campaignion_m2t_send.SendMessagesCron'],
  ];
  return $items;
}

/**
 * Helper function to load a cron service and invoke it.
 */
function _campaignion_m2t_send_run($service) {
  Container::get()->loadService($service)->run();
}

/**
 * Helper function to get all M2T content types.
 *
 * @return str[] Array of node type machine names.
 */
function _campaignion_m2t_send_content_types() {
  $types = &drupal_static(__FUNCTION__);
  if ($types === NULL) {
    $info = array_filter(module_invoke_all('campaignion_action_info'), function ($i) {
      return ($i['channel'] ?? NULL) == EmailNoSend::class;
    });
    $types = array_keys($info);
  }
  return $types;
}

/**
 * Implements hook_webform_submission_insert().
 */
function campaignion_m2t_send_webform_submission_insert($node, $submission) {
  if (!in_array($node->type, _campaignion_m2t_send_content_types())) {
    return;
  }
  $s = new Submission($node, $submission);
  foreach ($s->webform->componentsByType('e2t_selector') as $component) {
    $values = $s->valuesByCid($component['cid']);
    db_delete('campaignion_m2t_send')
      ->condition('nid', $node->nid)
      ->condition('sid', $submission->sid)
      ->condition('cid', $component['cid'])
      ->condition('no', array_keys($values), 'NOT IN')
      ->execute();
    foreach ($values as $no => $value) {
      db_merge('campaignion_m2t_send')->key([
        'nid' => $node->nid,
        'sid' => $submission->sid,
        'cid' => $component['cid'],
        'no' => $no,
      ])->execute();
    }
  }
}

/**
 * Implements hook_webform_submission_load().
 */
function campaignion_m2t_send_webform_submission_load(&$submissions) {
  $data_sql = <<<SQL
  SELECT nid, sid, cid, no, data
  FROM {webform_submitted_data} d
    INNER JOIN {campaignion_m2t_send} m USING(nid, sid, cid, no)
  WHERE sid IN(:sids) AND sent_at IS NULL
  SQL;
  foreach (db_query($data_sql, [':sids' => array_keys($submissions)]) as $d) {
    $submissions[$d->sid]->m2t_unsent_messages[] = $d;
  }
}

/**
 * Implements hook_webform_submission_update().
 */
function campaignion_m2t_send_webform_submission_update($node, $submission) {
  campaignion_m2t_send_webform_submission_insert($node, $submission);
}

/**
 * Implements hook_webform_submission_delete().
 */
function campaignion_m2t_send_webform_submission_delete($node, $submission) {
  db_delete('campaignion_m2t_send')
    ->condition('sid', $submission->sid)
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function campaignion_m2t_send_node_delete($node) {
  db_delete('campaignion_m2t_send')
    ->condition('nid', $node->nid)
    ->execute();
}
