<?php

/**
 * @file
 * Hook implementations and callbacks for the campaignion_manage_clone module.
 */

use Drupal\little_helpers\Services\Container;

/**
 * Implements hook_menu_alter().
 */
function campaignion_manage_menu_alter(&$items) {
  if ($item = &$items['node/%node/clone/%clone_token'] ?? NULL) {
    // Donâ€™t display an inline link for the clone action when viewing pages.
    $item['type'] = MENU_CALLBACK;
    $item['context'] = MENU_CONTEXT_NONE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function campaignion_manage_clone_form_clone_node_confirm_alter(&$form, &$form_state) {
  $form['description']['#markup'] = t('Are you sure you want to duplicate %title?', ['%title' => $node->title]);
  $form['actions']['submit']['#value'] = t('Duplicate');
  $form['#submit'] = ['clone_node_confirm_submit'];
  // Add a custom submit-handler in order to redirect to the wizard.
  $form['#submit'][] = 'campaignion_manage_clone_node_confirm_submit';
}

/**
 * Submit handler for clone_node_confirm.
 */
function campaignion_manage_clone_node_confirm_submit($form, &$form_state) {
  if (module_exists('campaignion_wizard')) {
    $node = node_load($form_state['values']['nid']);
    if (Container::get()->loadService('campaignion_action.loader')->isActionType($node->type)) {
      $form_state['redirect'] = "node/{$node->nid}/wizard";
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 */
function campaignion_manage_clone_clone_node_alter($node, $context) {
  // Prefix the node title.
  $wrapped_node = entity_metadata_wrapper('node', $node);
  if (property_exists($node, 'field_admin_title') && !empty($wrapped_node->field_admin_title->value()) ) {
    $wrapped_node->field_admin_title->set('[DUPLICATE] ' . $wrapped_node->field_admin_title->value());
  }
  else  {
    $node->title = $node->public_title = '[DUPLICATE] ' . $context['original_node']->title;
  }
  // Clone thank you pages.
  if (!empty($node->field_thank_you_pages)) {
    foreach ($node->field_thank_you_pages['und'] as &$item) {
      if ($typ_nid = $item['node_reference_nid']) {
        $item['node_reference_nid'] = clone_node_save($typ_nid);
      }
    }
  }
  // Reset some node flags to their defaults.
  // This is copied from _clone_node_prepare but it resets by default.
  if (variable_get('clone_reset_' . $node->type, TRUE)) {
    $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
    // Fill in the default values.
    foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
      // Cast to int since that's how they need to be saved to the DB.
      $node->$key = (int) in_array($key, $node_options);
    }
  }
}
